﻿# Ubuntu webserver setup
# apt behind proxy
# add/comment:
# Acquire::http::Proxy "http://192.168.66.1:8783";
# Acquire::https::Proxy "http://192.168.66.1:8783";
sudo nano /etc/apt/apf.conf.d/01proxy

# set up host-only networking adapter connection on Virtualbox on netplan
sudo nano /etc/netplan/01-netcfg.yaml
# network:
#  version: 2
#  ethernets:
#	enp0s3:
#  	dhcp4: yes
#	enp0s8:
#  	dhcp4: no
#  	addresses: [192.168.56.5/24]
#  	# gateway4: 192.168.56.1
sudo netplan try
sudo netplan apply
# try pinging VBox adapter
ping -c 4 192.168.56.1

# install common software and dependencies
sudo apt install build-essential curl software-properties-common wget net-tools gcc g++ perl make
echo “alias ll=\"ls -alFh\"” >> .bashrc
source .bashrc
mkdir ~/in
mkdir ~/scripts

# add repositories
sudo apt-add-repository ppa:redislabs/redis
sudo add-apt-repository ppa:ondrej/php
curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list
# List all repositories
# grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/*

sudo apt update
sudo apt upgrade
sudo apt install nginx nginx-extras git nodejs mongodb-org openssl ufw zip unzip mysql-server mysql-common redis openssh-server apache2 apache2-utils nginx clamav clamav-daemon

# configure SSH and ufw
echo "Port 8022" | sudo tee /etc/ssh/sshd_config.d/00custom.conf
sudo systemctl restart ssh
sudo ufw enable
sudo ufw allow http
sudo ufw allow https
sudo ufw deny ssh
# deny other ports such as 3306, 8080, 5000 etc for local/proxied applications
sudo ufw allow from LOCAL_IP proto tcp to any port 8022

# configure apache
sudo a2enmod rewrite

# install and configure apache2 modsecurity
#sudo apt install libapache2-mod-security2
#sudo cp /etc/modesecurity/modsecurity.conf-recommended /etc/modsecurity/modsecurity.conf
#sudo nano /etc/modsecurity/modsecurity.conf
# Set: SecRuleEngine On
# Dowload latest OWASP Rules
#cd ~/
#mkdir repos
#cd repos
#git clone https://github.com/coreruleset/coreruleset.git

# install and enable ClamAV
sudo systemctl enable clamav-daemon
sudo systemctl enable clamav-freshclam



# MySQL setup
sudo mysql # use root password
# set root user password
mysql > ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password by 'new-password';
mysql > exit
mysql_secure_installation # basic setup and disable remote root login
# create databases
mysql -u root -p
mysql > create database 'database-name';
# MySQL < 8.0
mysql > grant all privileges on drupal7.* to ‘drupal7’@’127.0.0.1’ identified by ‘password’ with grant option;
# MySQL >= 8.0
mysql> CREATE USER 'root'@'%' IDENTIFIED BY 'PASSWORD';
mysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
# both to glush privileges
flush privileges;
# delete database
mysql > drop 'database-name';

#php support
sudo apt install php8.2 php8.2-mysql php8.2-zip php8.2-xml php8.2-gd php8.2-imagick php8.2-curl php8.2-mbstring php8.2-ssh2 php8.2-common php8.2-bz2 php8.2-fpm php8.2-cli php8.2-mongodb php8.2-oauth php8.2-redis php8.2-ssh2 libapache2-mod-php8.2 php8.0 php8.0-mysql php8.0-zip php8.0-xml php8.0-gd php8.0-imagick php8.0-curl php8.0-mbstring php8.0-ssh2 php8.0-common php8.0-bz2 php8.0-fpm php8.0-mcrypt php8.0-cli php8.0-mongodb php8.0-oauth php8.0-redis php8.0-ssh2 libapache2-mod-php8.0 php-pear pkg-php-tools
# disable php-fpm
sudo systemctl disable php8.*-fpm
sudo systemctl disable php8.*-fpm
# install composer
#curl -sS https://getcomposer.org/installer -o composer-setup.php
#HASH=`curl -sS https://composer.github.io/installer.sig`
#php -r "if (hash_file('SHA384', 'composer-setup.php') === '$HASH') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
# sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
cd ~/in
sudo php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
sudo php -r "if (hash_file('sha384', 'composer-setup.php') === '55ce33d7678c5a611085589f1f3ddf8b3c52d662cd01d4ba75c0ee0459970c2200a51f492d557530c71c15d8dba01eae') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
sudo php composer-setup.php
sudo php -r "unlink('composer-setup.php');"
sudo mkdir /usr/bin/composer
sudo mv composer.phar /usr/bin/composer
composer self-update --update-keys
composer self-update
composer global update

# install drush
# composer global require drush/drush:dev-master
composer global require drush/drush:dev-master
echo export PATH=\"$HOME/.config/composer/vendor/drush/drush:$PATH\" >> $HOME/.bashrc
source $HOME/.bashrc
drush --version
sudo tee ~/scripts/drushw <<EOT
#!/bin/bash
sudo -u www-data drush $@
EOT
sudo chmod +x drushw
sudo mv ~/scripts/drushw /usr/bin
echo "$USER ALL = (ALL) NOPASSWD: ALL" | sudo tee -a "/etc/sudoers.d/$USER"
drushw --version

composer create-project drupal/recommended-project:^9 $HOME/drupal9
sudo cp -R $HOME/drupal9/web /var/www/drupal9
sudo chown -R www-data:www-data /var/www
# wget -O drush.phar https://github.com/drush-ops/drush-launcher/releases/latest/download/drush.phar
# chmod +x drush.phar
# sudo mv drush.phar /usr/local/bin/drush
# drush --version
# drush dl drupal-7 --select
# drush si standard --db-url=mysql://drupal7:password@127.0.0.1/drupal7

# Redis
# Drupal 7 settings.php configuration
$conf['redis_client_interface'] = 'PhpRedis';
$conf['redis_client_host'] = '127.0.0.1';
$conf['redis_client_port'] = '6379';
$conf['redis_client_password'] = '';
$conf['lock_inc'] = 'sites/all/modules/contrib/redis/redis.lock.inc';
$conf['cache_backends'][] = 'sites/all/modules/contrib/redis/redis.autoload.inc';
$conf['cache_default_class'] = 'Redis_Cache';
// The 'cache_form' bin must be assigned to non-volatile storage.
$conf['cache_class_cache_form'] = 'DrupalDatabaseCache';
// The 'cache_field' bin must be transactional.
$conf['cache_class_cache_field'] = 'DrupalDatabaseCache';

# cron jobs
# daily
# sudo apt update
#
# weekly
# sudo apt upgrade
# check for drupal updates
# composer self-update
# pull repos
#
# manually, monthly
# sudo apt dist-upgrade
# sudo do-release-upgrade
#
# useful commands
# tar -xzf source_archive.tar.gz /destination/directory/
# tar -czf destination_archive.tar.gz /source/directory/
